//ansible installation 

sudo apt update
sudo apt install software-properties-common -y
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt install ansible -y

// java installation

sudo apt update
sudo apt install fontconfig openjdk-17-jre

// jenkins installation

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y


//docker installation 

sudo apt-get install docker.io -y

//terraform install

sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
wget -O- https://apt.releases.hashicorp.com/gpg | \
gpg --dearmor | \
sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
gpg --no-default-keyring \
--keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
--fingerprint
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update
sudo apt-get install terraform



//apache2 installation

#!/bin/bash
sudo apt-get update
sudo apt-get install -y apache2
sudo systemctl start apache2
cd /var/www/html
sudo chown ubuntu:ubuntu /var/www/html/index.html
echo "<html><h1>Hello from EC2 User</h1></html>" > index.html

//deployment file

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

//node port service


apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: NodePort
  ports:
   - port: 80
     targetPort:80
	 nodePort:3007 
  selector:
    app: nginx

//jenkins file


pipeline{
    agent any
    stages{
        stage('SCM checkout'){
            steps{
            git branch: 'main', url: 'https://github.com/alekhya-510/ansible2012.git'
        }
        }
        stage('playbook execution') {
            steps{
            ansiblePlaybook colorized: true, credentialsId: 'anything', disableHostKeyChecking: true, installation: 'ansible', inventory: 'ansible.inv', playbook: 'playbook.yaml', vaultTmpPath: ''
        }
        }
    }
}





//terraform file

provider "aws" {
  region="us-east-1"
}
resource "aws_vpc" "myvpc" {
  cidr_block = "10.0.0.0/16"
}
resource "aws_subnet" "public-sb" {
  vpc_id = aws_vpc.myvpc.id
  cidr_block = "10.0.1.0/24"
  tags={
    Name= "my-public-subnet"
  }
}
resource "aws_internet_gateway" "myigw" {
  vpc_id = aws_vpc.myvpc.id
  tags={
    Name= "my-igw"
  }
}
resource "aws_route_table" "rtb1" {
  vpc_id = aws_vpc.myvpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.myigw.id
  }
tags={
    Name= "public-rtb1"
  }
}
resource "aws_route_table_association" "public-rtb" {
  subnet_id = aws_subnet.public-sb.id
  route_table_id= aws_route_table.rtb1.id
}
resource "aws_security_group" "instance-sg" {
  name = "instace-sg"
  description = "allow traffic from port 22,80,8080"
  vpc_id = aws_vpc.myvpc.id
  ingress  {
    from_port = 22
    to_port= 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 80
    to_port= 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 8080
    to_port= 8080
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
 egress  {
  from_port = 0
  to_port = 0
  protocol = "-1"
  cidr_blocks = ["0.0.0.0/0"]
  }
  tags= {
    Name = "instance-sg"
  }
}
resource "aws_instance" "instance1" {
  ami = "ami-080e1f13689e07408"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.public-sb.id
  vpc_security_group_ids = [aws_security_group.instance-sg.id]
  key_name = "hanvi"
  tags= {
    Name= " instance1"
  }
}
resource "aws_eip" "eip1"{
    domain = "vpc"
    instance = aws_instance.instance1.id
  }
resource "aws_instance" "instance2" {
  ami = "ami-080e1f13689e07408"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.public-sb.id
  vpc_security_group_ids = [aws_security_group.instance-sg.id]
  key_name = "hanvi"
  tags= {
    Name= " instance2"
  }
}
resource "aws_eip" "eip2"{
   domain =  "vpc"
    instance = aws_instance.instance2.id
  }
resource "aws_instance" "instance3" {
  ami = "ami-080e1f13689e07408"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.public-sb.id
  vpc_security_group_ids = [aws_security_group.instance-sg.id]
  key_name = "hanvi"
  tags= {
    Name= " instance3"
  }
}
resource "aws_eip" "eip3"{
    domain = "vpc"
    instance = aws_instance.instance3.id
  }
